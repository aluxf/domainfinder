import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { Textarea } from "components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "components/ui/select"

import {Button} from "components/ui/button"

import {
  Card,
} from "components/ui/card"

import { Badge } from "components/ui/badge";
import { Label } from "components/ui/label";
import { Input } from "components/ui/input";
import { useEffect, useState } from "react";
import { CogIcon,Twitter, TwitterIcon, InstagramIcon, YoutubeIcon, LucideIcon} from "lucide-react";
import { Slider } from "components/ui/slider";

interface SocialIconProps{
  Icon: LucideIcon,
  style: string,
  free: boolean
}

function SocialIcon({Icon, style, free} : SocialIconProps) {
  return <Icon className={`${free ? style + " text-white": "bg-gray-300 text-gray-400"} p-1 rounded-full`} size={30}/>
}

/**
 * 
 * @returns 
 * Generate 10 examples => Generate 10 more => Generate 10 more
 * Rank list based on the new generations
 */

const Home: NextPage = () => {
  const [info, setInfo] = useState("")
  const [style, setStyle] = useState("casual")
  const [positives, setPositives] = useState<string[]>([])
  const [positiveInput, setPositiveInput] = useState("")
  const [negativeInput, setNegativeInput] = useState("")
  const [negatives, setNegatives] = useState<string[]>([])
  const [tldList, setTldList] = useState([".com"])
  const [brands, setBrands] = useState<any[]>([])
  const [socials, setSocials] = useState<any>({})
  const [creativity, setCreativity] = useState([0.5])

  const [showAdvanced, setShowAdvanced] = useState(false)


  function removePositive(index:number) {
    setPositives(positives.filter((_, i) => i !== index));
  }

  function removeNegative(index:number) {
    setNegatives(negatives.filter((_, i) => i !== index));
  }

  function addPositive() {
    setPositives((prev) => [...prev, positiveInput])
    setPositiveInput("")
  }

  function addNegative() {
    setNegatives((prev) => [...prev, negativeInput])
    setNegativeInput("")
  }

  useEffect(() => {
    console.log("use effect")
    console.log(socials)
    console.log(socials["SipSational"])
  }, [brands,socials])

  async function getSocialData(brandNames: string[]) {
    const response = await fetch("api/social", {
      method: "POST",
      body: JSON.stringify({
        brands: brandNames
      })
    })
    if (!response.ok || !response.body) {
      console.log("SocialData - response error")
      return
    }

    const data = await response.json()
    return data
  }

  async function getBrandNames(){

    const response = await fetch("api/brand", {
      method: "POST",
      body: JSON.stringify({
        info,
        style,
        positives,
        negatives,
        temperature: creativity[0],
        tldList
      })
    })

    if (!response.ok || !response.body) {
      console.log("Response error")
      return
    }

    const reader = response.body.getReader();

    const decoder = new TextDecoder('utf-8');

    reader.read().then(function processChunk({done, value}): any {
      if (done) {
        return;
      }

      const result = decoder.decode(value);
      const chunks = result.split('\n');

      chunks.forEach(async (chunk) => {
      if (chunk) { // Make sure the line is not empty
        const data = JSON.parse(chunk);
        console.log(data)
        // Update the state with the new objects
        setBrands(prevBrands => [...prevBrands, ...data]);
        // Fetch social data without waiting for the result
        getSocialData(data.map((brand:any) => brand.brand))
          .then((socialData) => {

            setSocials((prevSocial: any) => ({...prevSocial, ...socialData}));
          })
          .catch((error) => console.log(error)); // Catch any errors from getSocialData
      }
    });

      // Read the next chunk
      return reader.read().then(processChunk);
    });
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center h-screen overflow-scroll gap-10">
        <div className="flex items-center flex-col max-w-1/4 gap-8">
          <div className="h-60"></div>
          <div className="flex flex-col justify-center  items-center gap-4">

            <div className="flex flex-col item gap-2 text-center">
              <h1 className="text-center text-3xl font-semibold leading-tight">FastBrand.com</h1>
              <h2 className="text-gray-500"> Discover the perfect brand name faster than you can think</h2>
            </div>

            <Textarea value={info} onChange={(e) => setInfo(e.target.value)} placeholder="Describe your business" className="w-full h-40"/>
            <div className="flex w-full justify-between">
              <Button onClick={() => setShowAdvanced(!showAdvanced)} className="self-start bg-gray-200 text-gray-600 font-normal hover:bg-gray-300"> <CogIcon className="w-5 h-5 -ml-2 mr-2"/> Advanced settings</Button>
              <Button className="w-28" onClick={() => getBrandNames()}> Create </Button>
            </div>
            <Card className={`${showAdvanced ? "flex" : "hidden"} self-start p-4 flex-col gap-4`}>
            <div>
              <Label>Style</Label>
              <Select value={style} onValueChange={(value) => setStyle(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select a style" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="casual">Casual</SelectItem>
                    <SelectItem value="playful">Playful</SelectItem>
                    <SelectItem value="formal">Formal</SelectItem>

                </SelectContent>
              </Select>
            </div>
            
            <div className="flex flex-col gap-1">
              <Label>Include words</Label>
              <div className="flex">
                <Input onChange={(e) => setPositiveInput(e.target.value)} value={positiveInput} className="h-8 focus-visible:ring-0" placeholder="e.g. 'AI'"/>
                <Button onClick={() => addPositive()} className="h-7 self-center ml-3 text-xs">
                  Add
                </Button>
              </div>
              
              <div className="space-x-1">
                {
                  positives.map((word, index) => {
                    return (
                      <Badge key={index} className="py-[2px] bg-indigo-500">{word}<button onClick={() => removePositive(index)} className="text-[10px] pl-2">x</button></Badge>
                    )
                  })
                }
              </div>

            </div>

            <div className="flex flex-col gap-1">
              <Label>Exclude words</Label>
              <div className="flex">
                <Input onChange={(e) => setNegativeInput(e.target.value)} value={negativeInput} className="h-8 focus-visible:ring-0" placeholder="e.g. 'Super'"></Input>
                <Button onClick={() => addNegative()} className="h-7 self-center ml-3 text-xs">
                  Add
                </Button>
              </div>
              <div className="space-x-1">
                {
                  negatives.map((word, index) => {
                    return (
                      <Badge key={index} className="py-[2px] bg-gray-700">{word}<button onClick={() => removeNegative(index)} className="text-[10px] pl-2">x</button></Badge>
                    )
                  })
                }
              </div>
            </div>
            
            <div className="">
              <Label>Creativity</Label>
              <div className="flex gap-2">
                <Slider
                  value={creativity}
                  onValueChange={(value) => setCreativity(value)}
                  defaultValue={[0.5]}
                  max={1}
                  min={0}
                  step={0.1}
                />
                <p className="font-semibold"> {creativity}</p>
              </div>
            </div>
            

          </Card>
            
          
            
          </div>
        </div>

        <div className="flex flex-col items-center mb-auto gap-4">
            
        {
            brands.map((brand, index) => (
              Object.entries(brand.tlds).map(([tld, price] : [string,any], tldIndex) => {
                return (
                  <Card key={`${index}-${tldIndex}`}>
                    <div className="p-6 flex flex-row gap-8">
                      <div className=" flex-1">
                        <h2 className="font-semibold text-xl"> {brand.brand + "." + tld}</h2>
                        <div className="flex flex-row gap-10 mt-6">
                          <div className="font-semibold sm:whitespace-nowrap text-gray-400 space-y-2">
                            <p> SOCIALS </p>
                            <div className="inline-flex gap-1 ">
                              <SocialIcon Icon={TwitterIcon} style={"bg-blue-400"} free={socials[brand.brand]?.twitter}/>
                              <SocialIcon Icon={InstagramIcon} style={"bg-gradient-to-br from-[#4f5bd5] via-[#d62976] to-[#feda75]"} free={socials[brand.brand]?.instagram}/>
                              <SocialIcon Icon={YoutubeIcon} style={"bg-red-400"} free={socials[brand.brand]?.youtube}/>
                            </div>
                          </div>
                          <div className="font-semibold text-gray-400">
                            <p> RECALL </p>
                          </div>
                          <div className="font-semibold text-gray-400">
                            <p> READABILITY </p>
                          </div>
                          <div className="font-semibold text-gray-400">
                            <p> LENGTH </p>
                          </div>
                        </div>
                      </div>
                      <div className="flex flex-col w-32 items-center justify-center gap-6">
                        <p className="font-semibold text-lg"> $ {price} / year</p>
                        <Button>Purchase</Button>
                      </div>
                    </div>
                  </Card>
                )
              })
            ))
          }

          </div>
        
      </div>
    </>
  );
};

export default Home;
