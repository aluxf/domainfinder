import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { Textarea } from "components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "components/ui/select"

import {Button} from "components/ui/button"

import {
  Card,
} from "components/ui/card"

import { Badge } from "components/ui/badge";
import { Label } from "components/ui/label";
import { Input } from "components/ui/input";
import { useEffect, useState } from "react";
import { Cog , CogIcon} from "lucide-react";


/**
 * 
 * @returns 
 * Generate 10 examples => Generate 10 more => Generate 10 more
 * Rank list based on the new generations
 */

const Home: NextPage = () => {
  const [info, setInfo] = useState("")
  const [style, setStyle] = useState("casual")
  const [positives, setPositives] = useState<string[]>([])
  const [positiveInput, setPositiveInput] = useState("")
  const [negativeInput, setNegativeInput] = useState("")
  const [negatives, setNegatives] = useState<string[]>([])
  const [tldList, setTldList] = useState([".com",".net"])
  const [generatedDomains, setGeneratedDomains] = useState<any[]>([])

  const [showAdvanced, setShowAdvanced] = useState(false)

  function removePositive(index:number) {
    setPositives(positives.filter((_, i) => i !== index));
  }

  function removeNegative(index:number) {
    setNegatives(negatives.filter((_, i) => i !== index));
  }

  useEffect(() => {
    //SORT generatedDomains
    console.log(generatedDomains)
  }, [generatedDomains])

  async function getBrandNames(batchAmount: number){
    for (let i = 0; i < batchAmount; i++) {
      const data =  await getBrandNamesBatch()
      setGeneratedDomains((prev) => [...prev, ...data])
    }
  }

  async function getBrandNamesBatch(){

    const response = await fetch("api/brand", {
      method: "POST",
      body: JSON.stringify({
        generatedDomains,
        info,
        style,
        positives,
        negatives,
        tldList
      })
    })

    if (!response.ok) {
      return
    }
    const data = await response.json()
    //Sort generatedDomains on ranking
    return data
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center h-screen overflow-scroll gap-10">
        <div className="flex items-center flex-col max-w-1/4 gap-8">
          <div className="h-60"></div>
          <div className="flex flex-col justify-center  items-center gap-4">

            <div className="flex flex-col item gap-2 text-center">
              <h1 className="text-center text-3xl font-semibold leading-tight">FastBrand.com</h1>
              <h2 className="text-gray-500"> Discover the perfect brand name faster than you can think</h2>
            </div>

            <Textarea value={info} onChange={(e) => setInfo(e.target.value)} placeholder="Describe your business" className="w-full h-40"/>
            <div className="flex w-full justify-between">
              <Button onClick={() => setShowAdvanced(!showAdvanced)} className="self-start bg-gray-200 text-gray-600 font-normal hover:bg-gray-300"> <CogIcon className="w-5 h-5 -ml-2 mr-2"/> Advanced settings</Button>
              <Button className="w-28" onClick={() => getBrandNames(3)}> Create </Button>
            </div>
            <Card className={`${showAdvanced ? "flex" : "hidden"} self-start p-4 flex-col gap-4`}>
            <div>
              <Label>Style</Label>
              <Select value={style} onValueChange={(value) => setStyle(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select a style" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="casual">Casual</SelectItem>
                    <SelectItem value="playful">Playful</SelectItem>
                    <SelectItem value="formal">Formal</SelectItem>

                </SelectContent>
              </Select>
            </div>
            
            <div className="flex flex-col gap-1">
              <Label>Include words</Label>
              <div className="flex">
                <Input onChange={(e) => setPositiveInput(e.target.value)} value={positiveInput} className="h-8 focus-visible:ring-0" placeholder="e.g. 'AI'"/>
                <Button onClick={() => setPositives((prev) => [...prev, positiveInput])} className="h-7 self-center ml-3 text-xs">
                  Add
                </Button>
              </div>
              
              <div className="space-x-1">
                {
                  positives.map((word, index) => {
                    return (
                      <Badge key={index} className="py-[2px] bg-indigo-500">{word}<button onClick={() => removePositive(index)} className="text-[10px] pl-2">x</button></Badge>
                    )
                  })
                }
              </div>

            </div>

            <div className="flex flex-col gap-1">
              <Label>Exclude words</Label>
              <div className="flex">
                <Input onChange={(e) => setNegativeInput(e.target.value)} value={negativeInput} className="h-8 focus-visible:ring-0" placeholder="e.g. 'Super'"></Input>
                <Button onClick={() => setNegatives((prev) => [...prev, negativeInput])} className="h-7 self-center ml-3 text-xs">
                  Add
                </Button>
              </div>
              <div className="space-x-1 mt-2">
                {
                  negatives.map((word, index) => {
                    return (
                      <Badge key={index} className="py-[2px] bg-gray-700">{word}<button onClick={() => removeNegative(index)} className="text-[10px] pl-2">x</button></Badge>
                    )
                  })
                }
              </div>
            </div>
          </Card>
            
            
            
          </div>
        </div>

        <div className="flex flex-col items-center mb-auto gap-4">
            
            {
              generatedDomains.map((domain, index) => {
                return (
                  <Card key={index}>
              <div className="p-6 flex flex-row gap-8">
                <div className=" flex-1">
                  <h2 className="font-semibold text-xl"> {domain.name}</h2>
                  <div className="flex flex-row gap-10 mt-6">
                    <div className="font-semibold sm:whitespace-nowrap text-gray-400">
                      <p> SOCIALS AVAILABLE </p>
                    </div>
                    <div className="font-semibold text-gray-400">
                      <p> RECALL </p>
                    </div>
                    <div className="font-semibold text-gray-400">
                      <p> READABILITY </p>
                    </div>
                    <div className="font-semibold text-gray-400">
                      <p> LENGTH </p>
                    </div>
                  </div>
                 
                </div>
                
                <div className="flex flex-col w-32 items-center justify-center gap-6">
                  <p className="font-semibold text-lg"> $ {domain.price / 10**6} / year</p>
                  <Button>Purchase</Button>
                </div>
              </div>
            </Card>
                )
              })
            }
          </div>
        
      </div>
    </>
  );
};

export default Home;
